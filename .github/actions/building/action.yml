name: 'Building Action'
description: 'Genera un pom.xml dinámico (incluyendo recursos como images/) y ejecuta GameController mediante Maven.'

inputs:
  distribution:
    description: 'Distribución de JDK para setup-java'
    required: true
    default: 'temurin'
  java-version:
    description: 'Versión de Java'
    required: true
    default: '11'
  build-command:
    description: >-
      Parte del comando Maven a ejecutar, por ejemplo:
      'compile exec:java -Dexec.mainClass="flappybird.GameController"'.
    required: true
    default: 'compile exec:java -Dexec.mainClass="flappybird.GameController"'

runs:
  using: 'composite'
  steps:
    # 1. Generar pom.xml dinámico ANTES de setup-java con cache:
    #    para que actions/setup-java@v3 pueda encontrar el pom.xml y no falle:
    - name: Generar pom.xml dinámico con recursos
      shell: bash
      run: |
        cat << 'EOF' > pom.xml
        <project xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                                     http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.usuario.flappybird</groupId>
          <artifactId>flappybird</artifactId>
          <version>1.0-SNAPSHOT</version>
          <properties>
            <maven.compiler.source>11</maven.compiler.source>
            <maven.compiler.target>11</maven.compiler.target>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <junit.jupiter.version>5.9.2</junit.jupiter.version>
            <jacoco.plugin.version>0.8.10</jacoco.plugin.version>
          </properties>
          <dependencies>
            <!-- Incluimos JUnit en scope test para que mvn test en job de tests funcione -->
            <dependency>
              <groupId>org.junit.jupiter</groupId>
              <artifactId>junit-jupiter</artifactId>
              <version>${junit.jupiter.version}</version>
              <scope>test</scope>
            </dependency>
          </dependencies>
          <build>
            <!-- Directorios personalizados de código y tests -->
            <sourceDirectory>${project.basedir}/src/flappybird</sourceDirectory>
            <testSourceDirectory>${project.basedir}/tests/flappybird</testSourceDirectory>

            <!-- Incluir carpeta de imágenes como recurso: 
                 copiamos toda la carpeta images/ preservando la subcarpeta en classpath 
                 para que getResource("/images/xxx.png") encuentre el archivo :contentReference[oaicite:0]{index=0} -->
            <resources>
              <resource>
                <!-- Directorio raíz para copiar; al incluir images/**, 
                     se preserva la carpeta images en target/classes/images/... -->
                <directory>${project.basedir}</directory>
                <includes>
                  <include>images/**</include>
                </includes>
              </resource>
            </resources>

            <plugins>
              <!-- Compilador Java -->
              <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                  <source>${maven.compiler.source}</source>
                  <target>${maven.compiler.target}</target>
                </configuration>
              </plugin>
              <!-- Plugin para ejecutar la clase principal -->
              <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                  <!-- MainClass por defecto, pero se puede sobreescribir con -Dexec.mainClass -->
                  <mainClass>flappybird.GameController</mainClass>
                </configuration>
              </plugin>
              <!-- Plugin JaCoCo para instrumentar tests y generar reporte -->
              <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.plugin.version}</version>
                <executions>
                  <execution>
                    <id>prepare-agent</id>
                    <goals><goal>prepare-agent</goal></goals>
                  </execution>
                  <execution>
                    <id>report</id>
                    <phase>test</phase>
                    <goals><goal>report</goal></goals>
                  </execution>
                </executions>
              </plugin>
            </plugins>
          </build>
        </project>
        EOF
        echo "POM dinámico (incluyendo carpeta images/) generado:"
        cat pom.xml

    # 2. Setup Java y cache de Maven; ahora que pom.xml existe, el cache no fallará:
    - name: Setup Java y Maven (cache de Maven)
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.distribution }}
        java-version: ${{ inputs.java-version }}
        cache: 'maven'

    # 3. Mostrar versiones para debug
    - name: Mostrar versiones Java y Maven
      shell: bash
      run: |
        java -version
        mvn -v

    # 4. Ejecutar el comando de build
    - name: Ejecutar build-command con Maven
      shell: bash
      run: |
        echo "Ejecutando: mvn ${{ inputs.build-command }}"
        mvn compile
        mvn ${{ inputs.build-command }}
        # Si la aplicación abre GUI, envolver en xvfb-run si se necesita:
        # if command -v xvfb-run >/dev/null; then
        #   xvfb-run mvn ${{ inputs.build-command }}
        # else
        #   mvn ${{ inputs.build-command }}
        # fi

    # 5. Confirmar éxito
    - name: Confirmar Build & Run
      if: ${{ success() }}
      shell: bash
      run: echo "Build & Run completado exitosamente."
